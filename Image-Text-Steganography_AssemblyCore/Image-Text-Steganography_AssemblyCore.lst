Microsoft (R) Macro Assembler Version 14.00.23026.0	    12/24/16 18:34:17
EntryPoint.asm						     Page 1 - 1


				;===================================== Image/Text Steganography ===============================
				;===============Authors===============:
				;
				;
				;
				;

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 
 00000000			.data
 00000000 64 01 02 03 04	colors byte  100, 1, 2, 3, 4, 5, 6, 7
	   05 06 07
 = 000000FE			andConst EQU 11111110b
 = 00000001			orConst EQU 00000001b

				;#region FileRead Data
 = 00001388				BUFFER_SIZE EQU 5000

 00000008 45 3A 5C 69 6E		FilePath BYTE "E:\input.txt",0
	   70 75 74 2E 74
	   78 74 00
 00000015 00000000			FileHandler HANDLE ?
 00000019  00001388 [			INPUT_BUFFER BYTE BUFFER_SIZE DUP(?)
	    00
	   ]

 000013A1 49 6E 76 61 6C		INVALIDE_HANDLER_MESSAGE BYTE "Invalid Handler for input file...",0
	   69 64 20 48 61
	   6E 64 6C 65 72
	   20 66 6F 72 20
	   69 6E 70 75 74
	   20 66 69 6C 65
	   2E 2E 2E 00

 000013C3 00				FileLength BYTE ?
				;#endregion

 000013C4 45 6E 63 6F 64		MSG BYTE "Encode Me Please",0
	   65 20 4D 65 20
	   50 6C 65 61 73
	   65 00

 000013D5 00				COUN BYTE ?
 00000000			.code
				;=========================Encode Character Procedure =========================
				; EDX Contains offset of colors 8 count array
				;
				;
				;
				;
 00000000			Encode_Char PROC USES ECX ESI EBX EAX EDX
 00000000  51		   *	    push   ecx
 00000001  56		   *	    push   esi
 00000002  53		   *	    push   ebx
 00000003  50		   *	    push   eax
 00000004  52		   *	    push   edx
 00000005  B9 00000008			MOV ECX, 8 ;Number of bits
 0000000A  8B F2			MOV ESI, EDX

 0000000C			@ENCODE_CHARLOOP:

 0000000C  D0 E3			SHL BL, 1; transfer MSB in carry once
 0000000E  72 05			JC @encORING
					; clearnig
 00000010  80 26 FE			AND BYTE PTR[ESI], andConst
 00000013  EB 03			JMP @ecFinal

 00000015			@encORING:
 00000015  80 0E 01			OR BYTE PTR[ESI], orConst

 00000018			@ecFinal:
 00000018  B8 00000000			MOV EAX , 0
 0000001D  8B 06			MOV EAX, [ESI]
 0000001F  46				INC ESI

 00000020  E2 EA			LOOP @ENCODE_CHARLOOP

				RET
 00000022  5A		   *	    pop    edx
 00000023  58		   *	    pop    eax
 00000024  5B		   *	    pop    ebx
 00000025  5E		   *	    pop    esi
 00000026  59		   *	    pop    ecx
 00000027  C3		   *	    ret    00000h
 00000028			Encode_Char ENDP

				;=========================Decode Character Procedure =========================
				;
				;
				;EDX = OFFSET pixelsArray
				;
				;EAX = Decoded Character
 00000028			Decode_Char PROC USES ECX ESI EAX EDX
 00000028  51		   *	    push   ecx
 00000029  56		   *	    push   esi
 0000002A  50		   *	    push   eax
 0000002B  52		   *	    push   edx
 0000002C  B9 00000008			MOV ECX, 8
 00000031  8B F2			MOV ESI,EDX
 00000033  B8 00000000			MOV EAX,0
 00000038			@decBegin:
 00000038  80 26 01			AND BYTE PTR [ESI], 00000001b
 0000003B  02 06			ADD AL, BYTE PTR[ESI]
 0000003D  83 F9 01			CMP ECX,1
 00000040  74 03			JE @decIgnore
 00000042			@decShift:
 00000042  D0 E0			SHL AL,1
 00000044  46				INC ESI
 00000045			@decIgnore:
 00000045  E2 F1			LOOP @decBegin
 00000047  E8 00000000 E		CALL WriteChar
				RET
 0000004C  5A		   *	    pop    edx
 0000004D  58		   *	    pop    eax
 0000004E  5E		   *	    pop    esi
 0000004F  59		   *	    pop    ecx
 00000050  C3		   *	    ret    00000h
 00000051			Decode_Char ENDP
				;============================ Load File Data ===================================
				;Loads file content from disk
				;===============================================================================
 00000051			LoadFileData PROC USES EDX ECX EAX
					
 00000051  52		   *	    push   edx
 00000052  51		   *	    push   ecx
 00000053  50		   *	    push   eax
 00000054  BA 00000008 R		MOV EDX,OFFSET FilePath
 00000059  B9 0000000D			MOV ECX, LENGTHOF FilePath
					
 0000005E  E8 00000000 E		CALL OpenInputFile

 00000063  A3 00000015 R		MOV FileHandler, EAX
 00000068  83 F8 FF			CMP EAX, INVALID_HANDLE_VALUE
 0000006B  74 58			JE @INVALID_FILE
 0000006D  BA 00000019 R		MOV EDX, OFFSET INPUT_BUFFER
 00000072  B9 00001388			MOV ECX, BUFFER_SIZE
 00000077  E8 00000000 E		CALL ReadFromFile
 0000007C  73 13			JNC @CHECK_BUFFER_SIZE; error reading ?
					mWrite "Error reading file. "; yes: show error message
 000013D6		     1		.data		
 000013D6 45 72 72 6F 72     1		??0000 BYTE "Error reading file. ",0	
	   20 72 65 61 64
	   69 6E 67 20 66
	   69 6C 65 2E 20
	   00
 0000007E		     1		.code
 0000007E  52		     1		push	edx
 0000007F  BA 000013D6 R     1		mov	edx,OFFSET ??0000
 00000084  E8 00000000 E     1		call	WriteString
 00000089  5A		     1		pop	edx
 0000008A  E8 00000000 E		CALL WriteWindowsMsg
 0000008F  EB 39			JMP @TERMINATE
 00000091			@CHECK_BUFFER_SIZE:
 00000091  3D 00001388			CMP EAX, BUFFER_SIZE; buffer large enough ?
 00000096  72 0E			JB @OK_BUF_SIZE; yes
					mWrite <"Error: Buffer too small for the file", 0dh, 0ah>
 000013EB		     1		.data		
 000013EB 45 72 72 6F 72     1		??0001 BYTE "Error: Buffer too small for the file", 0dh, 0ah,0	
	   3A 20 42 75 66
	   66 65 72 20 74
	   6F 6F 20 73 6D
	   61 6C 6C 20 66
	   6F 72 20 74 68
	   65 20 66 69 6C
	   65 0D 0A 00
 00000098		     1		.code
 00000098  52		     1		push	edx
 00000099  BA 000013EB R     1		mov	edx,OFFSET ??0001
 0000009E  E8 00000000 E     1		call	WriteString
 000000A3  5A		     1		pop	edx
 000000A4  EB 24			JMP @TERMINATE; and quit
 000000A6			@OK_BUF_SIZE:
 000000A6  C6 80 00000019 R		MOV INPUT_BUFFER[EAX], 0; insert null terminator
	   00
					mWrite "File size: "
 00001412		     1		.data		
 00001412 46 69 6C 65 20     1		??0002 BYTE "File size: ",0	
	   73 69 7A 65 3A
	   20 00
 000000AD		     1		.code
 000000AD  52		     1		push	edx
 000000AE  BA 00001412 R     1		mov	edx,OFFSET ??0002
 000000B3  E8 00000000 E     1		call	WriteString
 000000B8  5A		     1		pop	edx
 000000B9  A2 000013C3 R		MOV FileLength, AL
					;CALL WriteDec; display file size
 000000BE  E8 00000000 E		CALL Crlf
 000000C3  EB 05			JMP @READ_FINAL
 000000C5			@INVALID_FILE:
 000000C5  BA 000013A1 R		MOV EDX, OFFSET INVALIDE_HANDLER_MESSAGE
					;CALL WriteString
					;CALL Crlf
					;CALL WaitMsg
 000000CA			@READ_FINAL:
					;MOV EDX,OFFSET INPUT_BUFFER
					;CALL WriteString
 000000CA			@TERMINATE:
					RET
 000000CA  58		   *	    pop    eax
 000000CB  59		   *	    pop    ecx
 000000CC  5A		   *	    pop    edx
 000000CD  C3		   *	    ret    00000h
 000000CE			LoadFileData ENDP
				;================================= Read Color Value =========================
				;Recieves: ESI contains offset of Input Buffer
				;Reads 3 characters and convert them to a number
				;Returns: EAX contains the number from string value
 000000CE			ReadColorValue PROC USES EDX ECX EBX
 000000CE  52		   *	    push   edx
 000000CF  51		   *	    push   ecx
 000000D0  53		   *	    push   ebx
 000000D1  4E				DEC ESI
 000000D2  B9 00000003			MOV ECX, 3
 000000D7  C6 05 000013D5 R		MOV COUN, 0
	   00
 000000DE  BA 00000064			MOV EDX, 100
 000000E3  FC				CLD
 000000E4  B8 00000000			MOV EAX,0
					;SUB EAX,48
 000000E9			@ReadNum:
 000000E9  50				PUSH EAX
 000000EA  AC				LODSB
 000000EB  83 E8 30			SUB EAX,48	
 000000EE  FE 05 000013D5 R		INC COUN
 000000F4  5B				POP EBX
 000000F5  52				PUSH EDX
 000000F6  F7 E2			MUL EDX
 000000F8  5A				POP EDX
 000000F9  03 C3			ADD EAX,EBX
					;Div EDX by 10
 000000FB  50				PUSH EAX
 000000FC  8B C2			MOV EAX,EDX
 000000FE  BA 00000000			MOV EDX,0
 00000103  BB 0000000A			MOV EBX,10
 00000108  F7 F3			DIV EBX
 0000010A  8B D0			MOV EDX,EAX
 0000010C  58				POP EAX
 0000010D  E2 DA			LOOP @ReadNum
					;EAX Holds Value
					RET
 0000010F  5B		   *	    pop    ebx
 00000110  59		   *	    pop    ecx
 00000111  5A		   *	    pop    edx
 00000112  C3		   *	    ret    00000h
 00000113			ReadColorValue ENDP
				;=============================== Read File Pixel =============================
 00000113			ReadPixelValue PROC

 00000113  BE 00000019 R		MOV ESI,OFFSET INPUT_BUFFER

 00000118  0F B6 0D			MOVZX ECX, FileLength
	   000013C3 R
 0000011F  B8 00000000			MOV EAX, 0
 00000124  FC				CLD
 00000125			@ReadPixel:
 00000125  AC				LODSB
					.if AL == ","
 00000126  3C 2C	   *	    cmp    al, ','
 00000128  75 07	   *	    jne    @C0001
 0000012A  E8 00000000 E		CALL Crlf
					.ELSEIF AL == ";"
 0000012F  EB 37	   *	    jmp    @C0003
 00000131		   *@C0001:
 00000131  3C 3B	   *	    cmp    al, ';'
 00000133  75 0C	   *	    jne    @C0004
 00000135  E8 00000000 E		CALL Crlf
 0000013A  E8 00000000 E		CALL Crlf
					.ELSEIF AL == "#"
 0000013F  EB 27	   *	    jmp    @C0006
 00000141		   *@C0004:
 00000141  3C 23	   *	    cmp    al, '#'
 00000143  75 11	   *	    jne    @C0007
 00000145  E8 00000000 E		CALL Crlf
 0000014A  E8 00000000 E		CALL Crlf
 0000014F  E8 00000000 E		CALL Crlf
					.ELSE
 00000154  EB 12	   *	    jmp    @C0009
 00000156		   *@C0007:
 00000156  E8 FFFFFF73			CALL ReadColorValue
 0000015B  83 E9 03			SUB ECX,3
 0000015E  E8 00000000 E		CALL WriteDec
 00000163  83 F9 00			CMP ECX, 0
 00000166  7E 02			JLE @Finish
					.ENDIF
 00000168		   *@C0009:
 00000168		   *@C0006:
 00000168		   *@C0003:

 00000168  E2 BB			LOOP @ReadPixel
 0000016A			@Finish:
 0000016A  C3			RET
 0000016B			ReadPixelValue ENDP
 0000016B			main PROC

 0000016B  E8 FFFFFEE1			CALL LoadFileData
 00000170  E8 00000000 E		CALL WaitMsg
 00000175  E8 00000000 E		CALL WaitMsg
 0000017A  E8 00000000 E		CALL Crlf
 0000017F  E8 FFFFFF8F			CALL ReadPixelValue

				;#region Encode Testing
				COMMENT @
				MOV BL, 'b'
				MOV EDX, OFFSET colors
				CALL Encode_Char

				mov ecx, 8
				mov ESI, offset colors
				l2:
				mov eax, 0
				MOV al, [ESI]
				call WriteDec

				mov al, ' '
				call WriteChar
				INC ESI
				loop l2

				;#endregion
				call WaitMsg
				CALL Crlf
				CALL Decode_Char
				CALL Crlf
				@
 00000184  E8 00000000 E	CALL WaitMsg
				exit
 00000189  6A 00	   *	    push   +000000000h
 0000018B  E8 00000000 E   *	    call   ExitProcess
 00000190			main ENDP
				END main

				COMMENT @DLL Setup

				DecodeTextMessage PROC imgeData:BYTE


				RET
				DecodeTextMessage ENDP

				EncodeTextMessage PROC msg:BYTE, imgData:BYTE
					


					RET
				EncodeTextMessage ENDP

				DllMain PROC hInstance:DWORD, fdwReason:DWORD, lpReserved:DWORD
				mov eax, 1 ; Return true to caller.
				ret
				DllMain ENDP
				END DllMain
@
Microsoft (R) Macro Assembler Version 14.00.23026.0	    12/24/16 18:34:17
EntryPoint.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000141E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000190 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Decode_Char  . . . . . . . . . .	P Near	 00000028 _TEXT	Length= 00000029 Public STDCALL
  @decBegin  . . . . . . . . . .	L Near	 00000038 _TEXT	
  @decShift  . . . . . . . . . .	L Near	 00000042 _TEXT	
  @decIgnore . . . . . . . . . .	L Near	 00000045 _TEXT	
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Encode_Char  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000028 Public STDCALL
  @ENCODE_CHARLOOP . . . . . . .	L Near	 0000000C _TEXT	
  @encORING  . . . . . . . . . .	L Near	 00000015 _TEXT	
  @ecFinal . . . . . . . . . . .	L Near	 00000018 _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LoadFileData . . . . . . . . . .	P Near	 00000051 _TEXT	Length= 0000007D Public STDCALL
  @CHECK_BUFFER_SIZE . . . . . .	L Near	 00000091 _TEXT	
  @OK_BUF_SIZE . . . . . . . . .	L Near	 000000A6 _TEXT	
  @INVALID_FILE  . . . . . . . .	L Near	 000000C5 _TEXT	
  @READ_FINAL  . . . . . . . . .	L Near	 000000CA _TEXT	
  @TERMINATE . . . . . . . . . .	L Near	 000000CA _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadColorValue . . . . . . . . .	P Near	 000000CE _TEXT	Length= 00000045 Public STDCALL
  @ReadNum . . . . . . . . . . .	L Near	 000000E9 _TEXT	
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadPixelValue . . . . . . . . .	P Near	 00000113 _TEXT	Length= 00000058 Public STDCALL
  @ReadPixel . . . . . . . . . .	L Near	 00000125 _TEXT	
  @Finish  . . . . . . . . . . .	L Near	 0000016A _TEXT	
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 0000016B _TEXT	Length= 00000025 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 000013D6 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 000013EB _DATA	
??0002 . . . . . . . . . . . . .	Byte	 00001412 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 00001388h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COUN . . . . . . . . . . . . . .	Byte	 000013D5 _DATA	
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FileHandler  . . . . . . . . . .	DWord	 00000015 _DATA	
FileLength . . . . . . . . . . .	Byte	 000013C3 _DATA	
FilePath . . . . . . . . . . . .	Byte	 00000008 _DATA	
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INPUT_BUFFER . . . . . . . . . .	Byte	 00000019 _DATA	
INVALIDE_HANDLER_MESSAGE . . . .	Byte	 000013A1 _DATA	
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MSG  . . . . . . . . . . . . . .	Byte	 000013C4 _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
andConst . . . . . . . . . . . .	Number	 000000FEh   
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
colors . . . . . . . . . . . . .	Byte	 00000000 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
orConst  . . . . . . . . . . . .	Number	 00000001h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
